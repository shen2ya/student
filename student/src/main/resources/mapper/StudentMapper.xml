<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.student.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.student.entity.Student" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="no" property="no" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="student_class" property="studentClass" jdbcType="INTEGER" />
    <result column="student_build" property="studentBuild" jdbcType="INTEGER" />
    <result column="student_room" property="studentRoom" jdbcType="INTEGER" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="img" property="img" jdbcType="VARCHAR" />
    <result column="valid" property="valid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, no, sex, student_class, student_build, student_room, phone, img, valid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.student.entity.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.student.entity.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.student.entity.Student" >
    insert into student (id, name, no, 
      sex, student_class, student_build, 
      student_room, phone, img, 
      valid)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{no,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{studentClass,jdbcType=INTEGER}, #{studentBuild,jdbcType=INTEGER}, 
      #{studentRoom,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, #{img,jdbcType=VARCHAR}, 
      #{valid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.student.entity.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="no != null" >
        no,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="studentClass != null" >
        student_class,
      </if>
      <if test="studentBuild != null" >
        student_build,
      </if>
      <if test="studentRoom != null" >
        student_room,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="img != null" >
        img,
      </if>
      <if test="valid != null" >
        valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="no != null" >
        #{no,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="studentClass != null" >
        #{studentClass,jdbcType=INTEGER},
      </if>
      <if test="studentBuild != null" >
        #{studentBuild,jdbcType=INTEGER},
      </if>
      <if test="studentRoom != null" >
        #{studentRoom,jdbcType=INTEGER},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="img != null" >
        #{img,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        #{valid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.student.entity.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.no != null" >
        no = #{record.no,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null" >
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.studentClass != null" >
        student_class = #{record.studentClass,jdbcType=INTEGER},
      </if>
      <if test="record.studentBuild != null" >
        student_build = #{record.studentBuild,jdbcType=INTEGER},
      </if>
      <if test="record.studentRoom != null" >
        student_room = #{record.studentRoom,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.img != null" >
        img = #{record.img,jdbcType=VARCHAR},
      </if>
      <if test="record.valid != null" >
        valid = #{record.valid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      no = #{record.no,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      student_class = #{record.studentClass,jdbcType=INTEGER},
      student_build = #{record.studentBuild,jdbcType=INTEGER},
      student_room = #{record.studentRoom,jdbcType=INTEGER},
      phone = #{record.phone,jdbcType=VARCHAR},
      img = #{record.img,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.student.entity.Student" >
    update student
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="no != null" >
        no = #{no,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="studentClass != null" >
        student_class = #{studentClass,jdbcType=INTEGER},
      </if>
      <if test="studentBuild != null" >
        student_build = #{studentBuild,jdbcType=INTEGER},
      </if>
      <if test="studentRoom != null" >
        student_room = #{studentRoom,jdbcType=INTEGER},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="img != null" >
        img = #{img,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        valid = #{valid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.student.entity.Student" >
    update student
    set name = #{name,jdbcType=VARCHAR},
      no = #{no,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      student_class = #{studentClass,jdbcType=INTEGER},
      student_build = #{studentBuild,jdbcType=INTEGER},
      student_room = #{studentRoom,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      img = #{img,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getList" parameterType="map" resultType="map">
    select a.*, b.name as ClassName, c.name as buildName, d.name as roomName from student a
    left join student_class b on a.student_class = b.id
    left join student_build c on a.student_build = c.id
    left join student_build_room d on a.student_room = d.id
    where 1 = 1
    <if test="name != null" >
      and a.name like concat('%', #{name}, '%')
    </if>
    <if test="no != null" >
      and a.no like concat('%', #{no}, '%')
    </if>
    <if test="buildId != null" >
      and c.id = #{buildId}
    </if>
    <if test="classId != null" >
      and b.id = #{classId}
    </if>
    <if test="access == 1">
      and exists (select 1 from user_build t where t.build_id = c.id and t.user_id = #{userId})
    </if>
    <if test="access == 2">
      and exists (select 1 from user_class t where t.class_id = b.id and t.user_id = #{userId})
    </if>

  </select>
</mapper>