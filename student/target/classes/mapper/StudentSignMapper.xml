<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.student.mapper.StudentSignMapper" >
  <resultMap id="BaseResultMap" type="com.student.entity.StudentSign" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="sign_time" property="signTime" jdbcType="TIMESTAMP" />
    <result column="sign_type" property="signType" jdbcType="INTEGER" />
    <result column="notes" property="notes" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, student_id, sign_time, sign_type, notes
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.student.entity.StudentSignExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student_sign
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student_sign
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student_sign
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.student.entity.StudentSignExample" >
    delete from student_sign
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.student.entity.StudentSign" >
    insert into student_sign (id, student_id, sign_time, 
      sign_type, notes)
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{signTime,jdbcType=TIMESTAMP}, 
      #{signType,jdbcType=INTEGER}, #{notes,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.student.entity.StudentSign" >
    insert into student_sign
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="signTime != null" >
        sign_time,
      </if>
      <if test="signType != null" >
        sign_type,
      </if>
      <if test="notes != null" >
        notes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="signTime != null" >
        #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="signType != null" >
        #{signType,jdbcType=INTEGER},
      </if>
      <if test="notes != null" >
        #{notes,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.student.entity.StudentSignExample" resultType="java.lang.Integer" >
    select count(*) from student_sign
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student_sign
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.signTime != null" >
        sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.signType != null" >
        sign_type = #{record.signType,jdbcType=INTEGER},
      </if>
      <if test="record.notes != null" >
        notes = #{record.notes,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student_sign
    set id = #{record.id,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      sign_time = #{record.signTime,jdbcType=TIMESTAMP},
      sign_type = #{record.signType,jdbcType=INTEGER},
      notes = #{record.notes,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.student.entity.StudentSign" >
    update student_sign
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="signTime != null" >
        sign_time = #{signTime,jdbcType=TIMESTAMP},
      </if>
      <if test="signType != null" >
        sign_type = #{signType,jdbcType=INTEGER},
      </if>
      <if test="notes != null" >
        notes = #{notes,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.student.entity.StudentSign" >
    update student_sign
    set student_id = #{studentId,jdbcType=INTEGER},
      sign_time = #{signTime,jdbcType=TIMESTAMP},
      sign_type = #{signType,jdbcType=INTEGER},
      notes = #{notes,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getList" parameterType="map" resultType="map">
    select s.*, a.name as StudentName, a.no, b.name as ClassName, c.name as buildName, d.name as roomName from student a
    inner join student_sign s on a.id = s.student_id
    left join student_class b on a.student_class = b.id
    left join student_build c on a.student_build = c.id
    left join student_build_room d on a.student_room = d.id
    where 1 = 1
    <if test="name != null" >
      and a.name like concat('%', #{name}, '%')
    </if>
    <if test="no != null" >
      and a.no like concat('%', #{no}, '%')
    </if>
    <if test="buildId != null" >
      and c.id = #{buildId}
    </if>
    <if test="classId != null" >
      and b.id = #{classId}
    </if>
    <if test="access == 1">
      and exists (select 1 from user_build t where t.build_id = c.id and t.user_id = #{userId})
    </if>
    <if test="access == 2">
      and exists (select 1 from user_class t where t.class_id = b.id and t.user_id = #{userId})
    </if>
    <if test="warn != null and warn == 1">
      and DATE_FORMAT(s.sign_time,'%H') > 22
    </if>
  </select>
</mapper>